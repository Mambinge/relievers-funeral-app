{"ast":null,"code":"import { BehaviorSubject, catchError, throwError, finalize } from \"rxjs\";\nimport { _environment } from \"../models\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./alert.service\";\nimport * as i2 from \"./auth.service\";\nexport let HTTPStatus = /*#__PURE__*/(() => {\n  class HTTPStatus {\n    constructor() {\n      this.behavior = new BehaviorSubject(false);\n    }\n    setHttpStatus(flight) {\n      this.behavior.next(flight);\n    }\n    getHttpStatus() {\n      return this.behavior.asObservable();\n    }\n    static #_ = this.ɵfac = function HTTPStatus_Factory(t) {\n      return new (t || HTTPStatus)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HTTPStatus,\n      factory: HTTPStatus.ɵfac\n    });\n  }\n  return HTTPStatus;\n})();\nexport let HTTPListener = /*#__PURE__*/(() => {\n  class HTTPListener {\n    constructor(status, notification, injector, auth) {\n      this.status = status;\n      this.notification = notification;\n      this.injector = injector;\n      this.auth = auth;\n      this.baseUrl = this.injector.get(_environment).environment;\n    }\n    intercept(req, next) {\n      this.status.setHttpStatus(true);\n      const token = this.auth.getToken();\n      const request = token ? req.clone({\n        url: this.checkUrl(req.url),\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      }) : req.clone({\n        url: this.checkUrl(req.url)\n      });\n      return next.handle(request).pipe(catchError(err => {\n        this.notification.showError(this.getMessage(err));\n        return throwError(err);\n      }), finalize(() => this.status.setHttpStatus(false)));\n    }\n    getMessage(err) {\n      if (err.status == 0) return 'This service currently unreachable';\n      if (err.status == 401) return 'UnAuthorized';\n      if (err.status == 500) return 'Internal Server Error';\n      // if(err.status == 404) return err.error? err.error.narrative ? err.error.narrative : err.error.error_description : '';\n      if (err.error) {\n        const error = typeof err.error === 'string' || err.error instanceof String ? JSON.parse(err.error.toString()) : err.error;\n        if (error && (error.message || error.error)) return error.error ? error.error : error.error;\n      }\n      return err.message ? err.message : 'Sorry, Unexpected Server Response';\n    }\n    checkUrl(url) {\n      if (url.startsWith('http')) return url;\n      const normalisedUrl = url.replace('//', '/');\n      return `${this.baseUrl}${normalisedUrl}`;\n    }\n    static #_ = this.ɵfac = function HTTPListener_Factory(t) {\n      return new (t || HTTPListener)(i0.ɵɵinject(HTTPStatus), i0.ɵɵinject(i1.AlertService), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.AuthService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HTTPListener,\n      factory: HTTPListener.ɵfac\n    });\n  }\n  return HTTPListener;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}