{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { JwtModule } from '@auth0/angular-jwt';\nimport { _environment } from './models';\nimport { AuthService } from './services';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { HTTPListener, HTTPStatus } from './services/http-interceptor';\nimport { AuthGuard } from './guard/auth-guard';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@auth0/angular-jwt\";\nexport let SharedModule = /*#__PURE__*/(() => {\n  class SharedModule {\n    constructor(parentModule) {\n      throwIfAlreadyLoaded(parentModule, 'SharedModule');\n    }\n    static forRoot(config) {\n      return {\n        ngModule: SharedModule,\n        providers: [{\n          provide: _environment,\n          useValue: config\n        }]\n      };\n    }\n    static #_ = this.ɵfac = function SharedModule_Factory(t) {\n      return new (t || SharedModule)(i0.ɵɵinject(SharedModule, 12));\n    };\n    static #_2 = this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: SharedModule\n    });\n    static #_3 = this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      providers: [AuthGuard, HTTPListener, HTTPStatus, {\n        provide: HTTP_INTERCEPTORS,\n        useClass: HTTPListener,\n        multi: true\n      }],\n      imports: [CommonModule, JwtModule.forRoot({\n        config: {\n          tokenGetter: token,\n          skipWhenExpired: true\n        }\n      })]\n    });\n  }\n  return SharedModule;\n})();\nfunction throwIfAlreadyLoaded(parentModule, moduleName) {\n  if (!parentModule) return;\n  throw new Error(`${moduleName} has already been loaded. Import Core modules in the AppModule only.`);\n}\nexport function token() {\n  return AuthService.TOKEN;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}