{"ast":null,"code":"import { catchError, empty, map } from 'rxjs';\nexport class DefaultService {\n  getAll(url) {\n    return this.defaultHttpClient.get(`${this.baseUrl}${url}`).pipe(catchError(() => empty()));\n  }\n  getFromUrl(url) {\n    return this.defaultHttpClient.get(`${this.baseUrl}${url}`).pipe(catchError(() => empty()));\n  }\n  get(id, body) {\n    return this.getFromUrl(`${id}`);\n  }\n  post(body) {\n    return this.postToUrl('', body);\n  }\n  postToUrl(url, body) {\n    return this.defaultHttpClient.post(`${this.baseUrl}${url}`, body, {\n      observe: 'response'\n    }).pipe(map(response => response.body));\n  }\n  update(body) {\n    return this.updateToUrl('', body);\n  }\n  updateToUrl(url, body) {\n    return this.defaultHttpClient.put(`${this.baseUrl}${url}`, body, {\n      observe: 'response'\n    }).pipe(map(response => response.body));\n  }\n  delete(url) {\n    return this.defaultHttpClient.delete(`${this.baseUrl}${url}`, {\n      observe: 'response'\n    }).pipe(map(response => response.body));\n  }\n  search(parameter) {\n    return this.getFromUrl(`?${parameter}`);\n  }\n  constructor(defaultHttpClient, baseUrl) {\n    this.defaultHttpClient = defaultHttpClient;\n    this.baseUrl = baseUrl;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}