{"ast":null,"code":"import { BehaviorSubject, catchError, throwError, finalize } from \"rxjs\";\nimport { _environment } from \"../models\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./alert.service\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"./auth.service\";\nexport class HTTPStatus {\n  constructor() {\n    this.behavior = new BehaviorSubject(false);\n  }\n  setHttpStatus(flight) {\n    this.behavior.next(flight);\n  }\n  getHttpStatus() {\n    return this.behavior.asObservable();\n  }\n  static #_ = this.ɵfac = function HTTPStatus_Factory(t) {\n    return new (t || HTTPStatus)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HTTPStatus,\n    factory: HTTPStatus.ɵfac\n  });\n}\nexport class HTTPListener {\n  constructor(status, notification, toastr, injector, auth) {\n    this.status = status;\n    this.notification = notification;\n    this.toastr = toastr;\n    this.injector = injector;\n    this.auth = auth;\n    this.baseUrl = this.injector.get(_environment).environment;\n  }\n  intercept(req, next) {\n    this.status.setHttpStatus(true);\n    const token = this.auth.getToken();\n    const request = token ? req.clone({\n      url: this.checkUrl(req.url),\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    }) : req.clone({\n      url: this.checkUrl(req.url)\n    });\n    return next.handle(request).pipe(catchError(err => {\n      this.notification.showError(this.getMessage(err));\n      return throwError(err);\n    }), finalize(() => this.status.setHttpStatus(false)));\n  }\n  getMessage(err) {\n    if (err.status == 0) return 'This service currently unreachable';\n    if (err.status == 401) return 'UnAuthorized';\n    if (err.status == 500) return 'Internal Server Error';\n    // if(err.status == 404) return err.error? err.error.narrative ? err.error.narrative : err.error.error_description : '';\n    if (err.error) {\n      const error = typeof err.error === 'string' || err.error instanceof String ? JSON.parse(err.error.toString()) : err.error;\n      if (error && (error.message || error.error)) return error.error ? error.error : error.error;\n    }\n    return err.message ? err.message : 'Sorry, Unexpected Server Response';\n  }\n  checkUrl(url) {\n    if (url.startsWith('http')) return url;\n    const normalisedUrl = url.replace('//', '/');\n    return `${this.baseUrl}${normalisedUrl}`;\n  }\n  static #_ = this.ɵfac = function HTTPListener_Factory(t) {\n    return new (t || HTTPListener)(i0.ɵɵinject(HTTPStatus), i0.ɵɵinject(i1.AlertService), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HTTPListener,\n    factory: HTTPListener.ɵfac\n  });\n}","map":{"version":3,"names":["BehaviorSubject","catchError","throwError","finalize","_environment","HTTPStatus","constructor","behavior","setHttpStatus","flight","next","getHttpStatus","asObservable","_","_2","factory","ɵfac","HTTPListener","status","notification","toastr","injector","auth","baseUrl","get","environment","intercept","req","token","getToken","request","clone","url","checkUrl","setHeaders","Authorization","handle","pipe","err","showError","getMessage","error","String","JSON","parse","toString","message","startsWith","normalisedUrl","replace","i0","ɵɵinject","i1","AlertService","i2","ToastrService","Injector","i3","AuthService"],"sources":["C:\\Users\\mambi\\OneDrive\\Documents\\Personal\\Angular\\richo\\relievers-funeral-app\\src\\app\\shared\\services\\http-interceptor.ts"],"sourcesContent":["import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from \"@angular/common/http\";\r\nimport { Injectable, Injector } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable, catchError, throwError, finalize } from \"rxjs\";\r\nimport { AuthService } from \"./auth.service\";\r\nimport { EnvironmentInterface, _environment } from \"../models\";\r\nimport { AlertService } from \"./alert.service\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\n\r\n@Injectable()\r\nexport class HTTPStatus {\r\n  private behavior: BehaviorSubject<boolean>;\r\n\r\n  constructor() { this.behavior = new BehaviorSubject<boolean>(false) }\r\n\r\n  setHttpStatus(flight: boolean) { this.behavior.next(flight) }\r\n\r\n  getHttpStatus(): Observable<boolean> { return this.behavior.asObservable() }\r\n}\r\n\r\n@Injectable()\r\nexport class HTTPListener implements HttpInterceptor {\r\n  readonly baseUrl: string;\r\n  constructor(private status: HTTPStatus,\r\n    private notification: AlertService,\r\n    private toastr: ToastrService,\r\n              private injector: Injector,\r\n              private auth: AuthService) {\r\n    this.baseUrl = this.injector.get<EnvironmentInterface>(_environment).environment;\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    this.status.setHttpStatus(true);\r\n    const token = this.auth.getToken();\r\n    const request = token ? req.clone({\r\n      url: this.checkUrl(req.url),\r\n      setHeaders: { Authorization: `Bearer ${token}` }\r\n    }) : req.clone({ url: this.checkUrl(req.url) });\r\n    return next.handle(request).pipe(\r\n      catchError((err: HttpErrorResponse) => {\r\n        this.notification.showError( this.getMessage(err),);\r\n        return throwError(err);\r\n      }),\r\n      finalize(() => this.status.setHttpStatus(false)));\r\n  }\r\n\r\n  getMessage(err: HttpErrorResponse) {\r\n    if (err.status == 0) return 'This service currently unreachable';\r\n    if(err.status == 401) return 'UnAuthorized';\r\n     if(err.status == 500) return 'Internal Server Error';\r\n\r\n    // if(err.status == 404) return err.error? err.error.narrative ? err.error.narrative : err.error.error_description : '';\r\n    if (err.error) {\r\n      const error = (typeof err.error === 'string' || err.error instanceof String) ?\r\n         JSON.parse(err.error.toString()) : err.error;\r\n      if (error && (error.message || error.error))\r\n        return error.error ? error.error : error.error;\r\n    }\r\n    return err.message ? err.message : 'Sorry, Unexpected Server Response';\r\n  }\r\n\r\n  checkUrl(url: string): string {\r\n    if (url.startsWith('http')) return url;\r\n    const normalisedUrl = url.replace('//', '/');\r\n    return `${this.baseUrl}${normalisedUrl}`;\r\n  }\r\n\r\n}\r\n"],"mappings":"AAEA,SAASA,eAAe,EAAcC,UAAU,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,MAAM;AAEpF,SAA+BC,YAAY,QAAQ,WAAW;;;;;AAK9D,OAAM,MAAOC,UAAU;EAGrBC,YAAA;IAAgB,IAAI,CAACC,QAAQ,GAAG,IAAIP,eAAe,CAAU,KAAK,CAAC;EAAC;EAEpEQ,aAAaA,CAACC,MAAe;IAAI,IAAI,CAACF,QAAQ,CAACG,IAAI,CAACD,MAAM,CAAC;EAAC;EAE5DE,aAAaA,CAAA;IAA0B,OAAO,IAAI,CAACJ,QAAQ,CAACK,YAAY,EAAE;EAAC;EAAC,QAAAC,CAAA,G;qBAPjER,UAAU;EAAA;EAAA,QAAAS,EAAA,G;WAAVT,UAAU;IAAAU,OAAA,EAAVV,UAAU,CAAAW;EAAA;;AAWvB,OAAM,MAAOC,YAAY;EAEvBX,YAAoBY,MAAkB,EAC5BC,YAA0B,EAC1BC,MAAqB,EACXC,QAAkB,EAClBC,IAAiB;IAJjB,KAAAJ,MAAM,GAANA,MAAM;IAChB,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,MAAM,GAANA,MAAM;IACI,KAAAC,QAAQ,GAARA,QAAQ;IACR,KAAAC,IAAI,GAAJA,IAAI;IACtB,IAAI,CAACC,OAAO,GAAG,IAAI,CAACF,QAAQ,CAACG,GAAG,CAAuBpB,YAAY,CAAC,CAACqB,WAAW;EAClF;EAEAC,SAASA,CAACC,GAAqB,EAAEjB,IAAiB;IAChD,IAAI,CAACQ,MAAM,CAACV,aAAa,CAAC,IAAI,CAAC;IAC/B,MAAMoB,KAAK,GAAG,IAAI,CAACN,IAAI,CAACO,QAAQ,EAAE;IAClC,MAAMC,OAAO,GAAGF,KAAK,GAAGD,GAAG,CAACI,KAAK,CAAC;MAChCC,GAAG,EAAE,IAAI,CAACC,QAAQ,CAACN,GAAG,CAACK,GAAG,CAAC;MAC3BE,UAAU,EAAE;QAAEC,aAAa,EAAE,UAAUP,KAAK;MAAE;KAC/C,CAAC,GAAGD,GAAG,CAACI,KAAK,CAAC;MAAEC,GAAG,EAAE,IAAI,CAACC,QAAQ,CAACN,GAAG,CAACK,GAAG;IAAC,CAAE,CAAC;IAC/C,OAAOtB,IAAI,CAAC0B,MAAM,CAACN,OAAO,CAAC,CAACO,IAAI,CAC9BpC,UAAU,CAAEqC,GAAsB,IAAI;MACpC,IAAI,CAACnB,YAAY,CAACoB,SAAS,CAAE,IAAI,CAACC,UAAU,CAACF,GAAG,CAAC,CAAE;MACnD,OAAOpC,UAAU,CAACoC,GAAG,CAAC;IACxB,CAAC,CAAC,EACFnC,QAAQ,CAAC,MAAM,IAAI,CAACe,MAAM,CAACV,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;EACrD;EAEAgC,UAAUA,CAACF,GAAsB;IAC/B,IAAIA,GAAG,CAACpB,MAAM,IAAI,CAAC,EAAE,OAAO,oCAAoC;IAChE,IAAGoB,GAAG,CAACpB,MAAM,IAAI,GAAG,EAAE,OAAO,cAAc;IAC1C,IAAGoB,GAAG,CAACpB,MAAM,IAAI,GAAG,EAAE,OAAO,uBAAuB;IAErD;IACA,IAAIoB,GAAG,CAACG,KAAK,EAAE;MACb,MAAMA,KAAK,GAAI,OAAOH,GAAG,CAACG,KAAK,KAAK,QAAQ,IAAIH,GAAG,CAACG,KAAK,YAAYC,MAAM,GACxEC,IAAI,CAACC,KAAK,CAACN,GAAG,CAACG,KAAK,CAACI,QAAQ,EAAE,CAAC,GAAGP,GAAG,CAACG,KAAK;MAC/C,IAAIA,KAAK,KAAKA,KAAK,CAACK,OAAO,IAAIL,KAAK,CAACA,KAAK,CAAC,EACzC,OAAOA,KAAK,CAACA,KAAK,GAAGA,KAAK,CAACA,KAAK,GAAGA,KAAK,CAACA,KAAK;;IAElD,OAAOH,GAAG,CAACQ,OAAO,GAAGR,GAAG,CAACQ,OAAO,GAAG,mCAAmC;EACxE;EAEAb,QAAQA,CAACD,GAAW;IAClB,IAAIA,GAAG,CAACe,UAAU,CAAC,MAAM,CAAC,EAAE,OAAOf,GAAG;IACtC,MAAMgB,aAAa,GAAGhB,GAAG,CAACiB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IAC5C,OAAO,GAAG,IAAI,CAAC1B,OAAO,GAAGyB,aAAa,EAAE;EAC1C;EAAC,QAAAnC,CAAA,G;qBA5CUI,YAAY,EAAAiC,EAAA,CAAAC,QAAA,CAAA9C,UAAA,GAAA6C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAD,EAAA,CAAAM,QAAA,GAAAN,EAAA,CAAAC,QAAA,CAAAM,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAA5C,EAAA,G;WAAZG,YAAY;IAAAF,OAAA,EAAZE,YAAY,CAAAD;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}