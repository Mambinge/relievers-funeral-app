{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@auth0/angular-jwt\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    static #_ = this.NAME = 'token';\n    static #_2 = this.USER = 'user';\n    constructor(jwtHelper) {\n      this.jwtHelper = jwtHelper;\n      this.userAction = new Subject();\n      this.token = AuthService.TOKEN = this.getToken();\n      this.setTokenPayload(this.token);\n      if (!this.tokenPayload) return;\n      this.permissions = this.tokenPayload.authorities;\n    }\n    getTokenPayload(token) {\n      return this.jwtHelper.decodeToken(token);\n      sessionStorage.setItem('user', JSON.stringify(token));\n    }\n    setTokenPayload(token) {\n      this.tokenPayload = this.getTokenPayload(token);\n      if (this.tokenPayload) return;\n      const data = {};\n      this.tokenPayload = data;\n    }\n    isAuthenticated() {\n      return !this.jwtHelper.isTokenExpired(this.token);\n    }\n    saveToken(token) {\n      sessionStorage.setItem(AuthService.NAME, token);\n      const userDetails = this.jwtHelper.decodeToken(token ? token : '');\n      sessionStorage.setItem(AuthService.USER, JSON.stringify(userDetails.resource_access.Frontend));\n    }\n    getToken() {\n      return sessionStorage.getItem(AuthService.NAME);\n    }\n    clearToken() {\n      sessionStorage.clear();\n    }\n    get getAction() {\n      return this.userAction.asObservable();\n    }\n    loadAction() {\n      this.userAction.next();\n    }\n    getUser() {\n      const userString = sessionStorage.getItem(AuthService.USER) ?? '{}';\n      return JSON.parse(userString);\n    }\n    static #_3 = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.JwtHelperService));\n    };\n    static #_4 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}